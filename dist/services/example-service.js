"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exporter = require('highcharts-export-server');
class ExampleService {
    static BuildChart(candleData, volumeData) {
        const exporter = require('highcharts-export-server');
        var exportSettings = {
            type: 'png',
            options: {
                xAxis: [{
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            day: '%e of %b'
                        }
                    }],
                yAxis: [{
                        labels: {
                            align: 'right',
                            x: -3
                        },
                        title: {
                            text: 'USD'
                        },
                        height: '60%',
                        lineWidth: 2,
                    },
                    {
                        labels: {
                            align: 'right',
                            x: -3
                        },
                        title: {
                            text: 'Volume'
                        },
                        top: '65%',
                        height: '35%',
                        offset: 0,
                        lineWidth: 2
                    }],
                rangeSelector: {
                    selected: 1
                },
                title: {
                    text: Symbol + ' Binance 30m Chart - Generated by WSCE Bot'
                },
                series: [{
                        type: 'candlestick',
                        name: 'BTC USDT',
                        data: candleData,
                        yAxis: 0,
                    }, {
                        type: 'column',
                        name: 'Volume',
                        data: volumeData,
                        yAxis: 1,
                    }]
            }
        };
        exporter.initPool();
        exporter.export(exportSettings, function (err, res) {
            //The export result is now in res.
            //If the output is not PDF or SVG, it will be base64 encoded (res.data).
            //If the output is a PDF or SVG, it will contain a filename (res.filename).
            //Kill the pool when we're done with it, and exit the application
            exporter.killPool();
            this.base64Image = res.data;
            return res;
        });
    }
    static GenerateCandleChart(symbol, timeframe) {
        var TodayDate = new Date().getMilliseconds();
        const binance = require('node-binance-api');
        binance.options({
            APIKEY: "hdeJew5q0VaDc4MFbyB2LGLmcmdVjpB0gl584xG1BciaPRf285XOyX393fatyOzp",
            APISECRET: "mBKwb1qZdZWqMwM6jdnGMDj0jf3UQqMsUuKDxJdYVYt6j49OXRRit6IKR2BcTEF1",
            useServerTime: true,
            test: true
        });
        return new Promise((resolve, reject) => {
            binance.candlesticks(symbol, timeframe, (error, ticks, symbol) => {
                var candleData = [];
                var volumeData = [];
                //   let last_tick = ticks[ticks.length - 1];
                //    let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = last_tick;
                for (let i = 0; i < ticks.length; i += 1) {
                    var candleTime = new Date(ticks[i][0]);
                    candleData.push([
                        ticks[i][0],
                        parseFloat(ticks[i][1]),
                        parseFloat(ticks[i][2]),
                        parseFloat(ticks[i][3]),
                        parseFloat(ticks[i][4]) // close
                    ]);
                    volumeData.push([
                        ticks[i][0],
                        parseFloat(ticks[i][5]) // the volume
                    ]);
                }
                // this.BuildChart(data,volumeData); cant get this to work probbly scoping issue
                const exporter = require('highcharts-export-server');
                var exportSettings = {
                    type: 'image/png',
                    options: {
                        plotOptions: {
                            candlestick: {
                                color: 'red',
                                upColor: 'green'
                            }
                        },
                        xAxis: [{
                                type: 'datetime',
                                dateTimeLabelFormats: {
                                    day: '%e of %b'
                                }
                            }],
                        yAxis: [{
                                labels: {
                                    align: 'right',
                                    x: -3,
                                    color: 'white'
                                },
                                title: {
                                    text: ''
                                },
                                height: '60%',
                                lineWidth: 2,
                            },
                            {
                                labels: {
                                    align: 'right',
                                    color: 'white',
                                    x: -3
                                },
                                title: {
                                    text: 'Volume',
                                    color: "white"
                                },
                                top: '75%',
                                height: '25%',
                                offset: 0,
                                lineWidth: 2
                            }],
                        rangeSelector: {
                            selected: 1
                        },
                        title: {
                            text: symbol + ' Binance ' + timeframe + ' Chart - Generated By WCSE Bot'
                        },
                        series: [{
                                type: 'candlestick',
                                name: symbol,
                                data: candleData,
                                yAxis: 0,
                            }, {
                                type: 'column',
                                name: 'Volume',
                                data: volumeData,
                                yAxis: 1,
                            }]
                    }
                };
                exporter.initPool();
                exporter.export(exportSettings, function (err, res) {
                    //The export result is now in res.
                    //If the output is not PDF or SVG, it will be base64 encoded (res.data).
                    //If the output is a PDF or SVG, it will contain a filename (res.filename).
                    //Kill the pool when we're done with it, and exit the application
                    exporter.killPool();
                    resolve((res.data));
                });
            }, { limit: 48, endTime: Date.now });
        });
    }
    static GenerateCandleChartPost(symbol, timeframe, candleInfo, ExchangeName) {
        return new Promise((resolve, reject) => {
            var candleData = [];
            var yaxisFormat;
            var volumeData = [];
            var lowest = parseFloat(candleInfo[0].Open);
            var highest = parseFloat(candleInfo[0].Open);
            var interval;
            for (let i = 0; i < candleInfo.length; i += 1) {
                var candleTime = new Date(candleInfo[i][0]);
                var tmp = parseFloat(candleInfo[i].Open);
                var tmp2 = parseFloat(candleInfo[i].Close);
                if (tmp < lowest)
                    lowest = tmp;
                if (tmp2 > highest)
                    highest = tmp2;
                interval = highest - lowest;
                candleData.push([
                    candleInfo[i].Date,
                    parseFloat(candleInfo[i].Open),
                    parseFloat(candleInfo[i].High),
                    parseFloat(candleInfo[i].Low),
                    parseFloat(candleInfo[i].Close) // close
                ]);
                volumeData.push([
                    candleInfo[i].Date,
                    parseFloat(candleInfo[i].Volume) // the volume
                ]);
            }
            if (interval > 4 && candleInfo[0].Open > 12) {
                interval = Math.round(interval / 4);
                yaxisFormat = '{value:.0f}';
            }
            else {
                interval = interval / 4;
                var e = 1, p = 0;
                while (Math.round(candleInfo[0].Open * e) / e !== candleInfo[0].Open) {
                    e *= 10;
                    p++;
                }
                if (p > 7)
                    p = 7;
                yaxisFormat = '{value:.' + p + 'f}';
            }
            var exportSettings = {
                type: 'image/png',
                options: {
                    plotOptions: {
                        candlestick: {
                            color: 'red',
                            lineColor: 'red',
                            upLineColor: 'green',
                            upColor: 'green'
                        }
                    },
                    xAxis: [{
                            type: 'datetime',
                            dateTimeLabelFormats: {
                                day: '%e of %b'
                            },
                            labels: {
                                style: {
                                    color: 'white'
                                }
                            },
                        }],
                    yAxis: [{
                            labels: {
                                align: 'right',
                                x: -5,
                                style: {
                                    color: 'white',
                                },
                                lineWidth: 1,
                                format: yaxisFormat
                            },
                            tickInterval: interval,
                            height: '70%',
                            title: {
                                text: null,
                                style: {
                                    fontFamily: "Verdana",
                                    color: "white",
                                }
                            },
                            lineWidth: 1
                        },
                        {
                            labels: {
                                align: 'right',
                                x: -3,
                                style: {
                                    color: 'white',
                                },
                            },
                            top: '80%',
                            height: '20%',
                            offset: 0,
                            align: 'right',
                            title: {
                                text: "",
                                style: {
                                    fontFamily: "Verdana",
                                    color: "white",
                                }
                            },
                            lineWidth: 1
                        },
                        {
                            title: {
                                text: null,
                            },
                            height: '70%',
                            lineWidth: 1,
                            opposite: true,
                            offset: 0
                        },
                        {
                            title: {
                                text: null,
                            },
                            top: '80%',
                            height: '20%',
                            offset: 0,
                            opposite: true,
                            lineWidth: 1
                        }
                    ],
                    title: {
                        text: symbol + ' ' + ExchangeName + ' ' + timeframe + ' Chart (@wcsetalks)',
                        style: {
                            color: "white",
                            fontSize: "14px",
                            fontWeight: "bold",
                            fontStyle: "normal"
                        }
                    },
                    chart: {
                        backgroundColor: "black",
                        spacing: 30,
                        width: 600,
                        style: {
                            fontStyle: "normal",
                            borderColor: 'white'
                        }
                    },
                    series: [{
                            type: 'candlestick',
                            showInLegend: false,
                            data: candleData,
                            plotBorderWidth: 1,
                            labels: {
                                color: 'white',
                            },
                            yAxis: 0,
                        }, {
                            type: 'column',
                            showInLegend: false,
                            data: volumeData,
                            yAxis: 1,
                            color: 'blue',
                        }]
                }
            };
            exporter.initPool();
            exporter.export(exportSettings, function (err, res) {
                exporter.killPool();
                resolve((res.data));
            });
        });
    }
    static GenerateOBChart(symbol, orderData) {
        return new Promise((resolve, reject) => {
            var OrderBid = [];
            var OrderAsk = [];
            for (let i = 0; i < orderData.Bids.length; i += 1) {
                OrderBid.push([
                    parseFloat(orderData.Bids[i].Price), parseFloat(orderData.Bids[i].Quantity)
                ]);
                OrderAsk.push([
                    orderData.Asks[i].Price, orderData.Asks[i].Quantity
                ]);
            }
            var x = [[8383.4, 0.136562], [8384, 0.246017], [8384.1, 0.3], [8384.17, 0.001382]];
            const exporter = require('highcharts-export-server');
            var exportSettings = {
                type: 'image/png',
                options: {
                    type: 'area',
                    title: {
                        text: symbol + ' Order Book Chart - Generated By WCSE Bot (@wcsetalks)'
                    },
                    series: [{
                            pointStart: OrderAsk[0].Price,
                            type: 'area',
                            color: 'green',
                            threshold: null,
                            data: OrderAsk
                        }
                    ],
                    yAxis: [{
                            labels: {
                                align: 'right',
                                x: -3
                            },
                            title: {
                                text: ''
                            }
                        }]
                }
            };
            exporter.initPool();
            exporter.export(exportSettings, function (err, res) {
                //The export result is now in res.
                //If the output is not PDF or SVG, it will be base64 encoded (res.data).
                //If the output is a PDF or SVG, it will contain a filename (res.filename).
                //Kill the pool when we're done with it, and exit the application
                exporter.killPool();
                resolve((res.data));
            });
        });
    }
    ;
    static processBinanceDate(error, ticks, symbol) {
        var candleData = [];
        var volumeData = [];
        let last_tick = ticks[ticks.length - 1];
        let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = last_tick;
        for (let i = 0; i < ticks.length; i += 1) {
            var candleTime = new Date(ticks[i][0]);
            candleData.push([
                ticks[i][0],
                parseFloat(ticks[i][1]),
                parseFloat(ticks[i][2]),
                parseFloat(ticks[i][3]),
                parseFloat(ticks[i][4]) // close
            ]);
            volumeData.push([
                ticks[i][0],
                parseFloat(ticks[i][5]) // the volume
            ]);
        }
        // this.BuildChart(data,volumeData); cant get this to work probbly scoping issue
        const exporter = require('highcharts-export-server');
        var exportSettings = {
            type: 'png',
            options: {
                xAxis: [{
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            day: '%e of %b'
                        }
                    }],
                yAxis: [{
                        labels: {
                            align: 'right',
                            x: -3
                        },
                        title: {
                            text: 'USD'
                        },
                        height: '60%',
                        lineWidth: 2,
                    },
                    {
                        labels: {
                            align: 'right',
                            x: -3
                        },
                        title: {
                            text: 'Volume'
                        },
                        top: '65%',
                        height: '35%',
                        offset: 0,
                        lineWidth: 2
                    }],
                rangeSelector: {
                    selected: 1
                },
                title: {
                    text: symbol + ' Binance 30m Chart - Generated by WSCE Bot'
                },
                series: [{
                        type: 'candlestick',
                        name: 'BTC USDT',
                        data: candleData,
                        yAxis: 0,
                    }, {
                        type: 'column',
                        name: 'Volume',
                        data: volumeData,
                        yAxis: 1,
                    }]
            }
        };
        exporter.initPool();
        exporter.export(exportSettings, function (err, res) {
            //The export result is now in res.
            //If the output is not PDF or SVG, it will be base64 encoded (res.data).
            //If the output is a PDF or SVG, it will contain a filename (res.filename).
            //Kill the pool when we're done with it, and exit the application
            exporter.killPool();
            return res;
        });
    }
}
exports.ExampleService = ExampleService;
//# sourceMappingURL=example-service.js.map